<template>
  <!-- SpecialUrlAddToTabsetComponent -->
  <template
    v-if="
      handler.actions(currentTabsetId, {
        tabset: props.tabset,
        level: 'root',
        currentChromeTab: props.currentChromeTab,
        element: 'contextmenu',
      }).length == 0 && defaultAction
    ">
    <q-btn
      padding="xs"
      fab-mini
      unelevated
      @click.stop="emits('buttonClicked', new ActionHandlerButtonClickedHolder(handler, defaultAction))"
      class="q-ma-none q-px-sm q-py-none"
      :icon="defaultAction.icon"
      :class="{ shakeWithColor: animateAddtabButton, 'cursor-pointer': !alreadyInTabset }"
      :color="alreadyInTabset ? 'grey-5' : containedInTsCount > 0 ? 'primary' : 'warning'"
      size="12px"
      data-testid="saveInTabsetBtn">
      <!--      <div>{{ defaultAction.label }}</div>-->
      <!--                  <q-icon right class="q-ma-none q-pa-none" size="2em" name="o_south" />-->
    </q-btn>
    <q-tooltip class="tooltip-small" v-if="alreadyInTabset">Already in current tabset</q-tooltip>
    <q-tooltip class="tooltip-small" v-else-if="containedInTsCount > 0">
      {{ tooltipAlreadyInOtherTabsets(props.tabset!.name) }}
    </q-tooltip>
    <q-tooltip class="tooltip-small" v-else>
      Add current Tab to '{{ tabsetNameOrChain(props.tabset as Tabset) }}'...
    </q-tooltip>
  </template>

  <!-- SpecialUrlAddToTabsetComponent handlerDefaultAction -->
  <template v-else-if="showExtraMenuItems()">
    <q-btn
      padding="xs"
      fab-mini
      unelevated
      @click.stop="emits('buttonClicked', new ActionHandlerButtonClickedHolder(handler, defaultAction))"
      class="q-ma-none q-px-sm q-py-none"
      :icon="defaultAction?.icon"
      :class="{ shakeWithColor: animateAddtabButton, 'cursor-pointer': !alreadyInTabset }"
      :color="alreadyInTabset ? 'grey-5' : containedInTsCount > 0 ? 'primary' : 'warning'"
      size="12px"
      data-testid="saveInTabsetBtn">
      <q-tooltip class="tooltip-small" v-if="alreadyInTabset">Already in current tabset {{ defaultAction }}</q-tooltip>
      <q-tooltip class="tooltip-small" v-else-if="containedInTsCount > 0">
        {{ tooltipAlreadyInOtherTabsets(props.tabset!.name) }}
      </q-tooltip>
      <q-tooltip class="tooltip-small" v-else>
        Add current Tab to '{{ tabsetNameOrChain(props.tabset as Tabset) }}'...
      </q-tooltip>
    </q-btn>

    <transition appear>
      <span>
        <q-btn flat icon="more_vert" text-color="primary" class="cursor-pointer q-ma-none q-pa-none" size="md" />
        <q-menu :offset="[0, 0]" @click.stop="">
          <q-list dense style="min-width: 200px">
            <template
              v-for="l in handler.actions(currentTabsetId, {
                tabset: props.tabset,
                level: 'root',
                currentChromeTab: props.currentChromeTab,
                element: 'contextmenu',
              })">
              <template v-if="'context' in l">
                <component
                  :key="l.component.name"
                  :is="l.component"
                  :tabset="props.tabset"
                  :folder="props.folder"
                  :currentChromeTab="props.currentChromeTab"
                  :level="'root'"
                  :context="'context' in l ? l.context : {}" />
              </template>
            </template>
          </q-list>
        </q-menu>
      </span>
    </transition>
  </template>
</template>

<script lang="ts" setup>
import { useQuasar } from 'quasar'
import { useActionHandlers } from 'src/tabsets/actionHandling/ActionHandlers'
import { AddUrlToTabsetHandler } from 'src/tabsets/actionHandling/AddUrlToTabsetHandler'
import { NoopAddUrlToTabsetHandler } from 'src/tabsets/actionHandling/handler/NoopAddUrlToTabsetHandler'
import { ActionContext } from 'src/tabsets/actionHandling/model/ActionContext'
import { ActionHandlerButtonClickedHolder } from 'src/tabsets/actionHandling/model/ActionHandlerButtonClickedHolder'
import { useTabsetService } from 'src/tabsets/services/TabsetService2'
import { useTabsetsStore } from 'src/tabsets/stores/tabsetsStore'
import { useUiStore } from 'src/ui/stores/uiStore'
import { ref, watchEffect } from 'vue'
import { Tabset } from '../models/Tabset'

const props = defineProps<{
  currentChromeTab: chrome.tabs.Tab
  tabset: Tabset
  folder?: Tabset
}>()

const emits = defineEmits(['buttonClicked', 'asNewFile', 'extraSpaceNeeded'])

const $q = useQuasar()

const { getHandler } = useActionHandlers($q)

const handler = ref<AddUrlToTabsetHandler>(new NoopAddUrlToTabsetHandler())
const defaultAction = ref<ActionContext | undefined>(undefined)
const containedInTsCount = ref(0)
const animateAddtabButton = ref(false)
const currentTabsetId = ref<string | undefined>(undefined)
const alreadyInTabset = ref(false)
//const extraMenuItems = ref(false)

watchEffect(() => {
  useTabsetsStore()
    .getCurrentTabsetId()
    .then((tsId: string | undefined) => (currentTabsetId.value = tsId))
})

const showExtraMenuItems = () => {
  const res: boolean =
    handler.value.actions(currentTabsetId.value, {
      tabset: props.tabset,
      level: 'root',
      currentChromeTab: props.currentChromeTab,
      element: 'contextmenu',
    }).length > 0 && defaultAction.value !== undefined
  emits('extraSpaceNeeded', res)
  return res
}

watchEffect(() => {
  //console.log('defaultAction!!', props.currentChromeTab.url, props.folder)
  handler.value = getHandler(props.currentChromeTab.url, props.folder)
  defaultAction.value = handler.value.defaultAction()
  showExtraMenuItems()
})

watchEffect(() => {
  containedInTsCount.value = useTabsetService().tabsetsFor(props.currentChromeTab.url!).length
})

watchEffect(() => {
  animateAddtabButton.value = useUiStore().animateAddtabButton
})

watchEffect(() => {
  alreadyInTabset.value = useTabsetService().urlExistsInCurrentTabset(props.currentChromeTab.url)
})

const activeFolderNameFor = (ts: Tabset, activeFolder: string) => {
  const folder = useTabsetsStore().getActiveFolder(ts, activeFolder)
  return folder ? folder.name : ts.name
}

const tabsetNameOrChain = (tabset: Tabset) => {
  return tabset.folderActive ? activeFolderNameFor(tabset, tabset.folderActive) : tabset.name
}

const tooltipAlreadyInOtherTabsets = (tabsetName: string) =>
  `Already contained in ${containedInTsCount.value} other tabsets. Click to add here as well.`
</script>

<style>
.q-btn-dropdown--simple * + .q-btn-dropdown__arrow {
  margin-left: 0;
  border: 1px solid red;
}

.q-btn-dropdown--split .q-btn-dropdown__arrow-container {
  padding: 0;
}
</style>
