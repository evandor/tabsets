<template>
  <q-dialog ref="dialogRef" @hide="onDialogHide">
    <q-card class="q-dialog-plugin">
      <q-card-section>
        <div class="text-h6">Missing Permission</div>
      </q-card-section>
      <q-card-section>
        <div class="text-body">
          The Tabsets Extension requires an additional permission ({{props.permissionName}}
          for this action.
        </div>
      </q-card-section>

      <q-card-actions align="right" class="text-primary">
        <q-btn flat label="Cancel" v-close-popup/>
        <q-btn flat label="Grant Permission"
               data-testid="add_url_submit"
               :disable="url.trim().length === 0" v-close-popup
               @click="createNewUrl()"/>
      </q-card-actions>
    </q-card>

  </q-dialog>

</template>

<script lang="ts" setup>

import {computed, ref, watchEffect} from "vue";
import {uid, useQuasar} from "quasar";
import {useDialogPluginComponent} from 'quasar'
import {STRIP_CHARS_IN_USER_INPUT} from "src/boot/constants";
import TabsetService from "src/tabsets/services/TabsetService";
import {Tab} from "src/tabsets/models/Tab";
import {useTabsetsStore} from "src/tabsets/stores/tabsetsStore";
import ChromeApi from "src/app/BrowserApi";

defineEmits([
  ...useDialogPluginComponent.emits
])

const url = ref('')

const props = defineProps({
  permissionName: {
    type: String,
    required: true
  })

const {dialogRef, onDialogHide, onDialogCancel} = useDialogPluginComponent()

const newTabsetName = ref('')
const newTabsetNameExists = ref(false)
const hideWarning = ref(false)

watchEffect(() => {
  newTabsetNameExists.value = !!useTabsetsStore().existingInTabset(newTabsetName.value);
})


const newTabsetNameIsValid = computed(() => newTabsetName.value.length <= 32 && !STRIP_CHARS_IN_USER_INPUT.test(newTabsetName.value))

const createNewUrl = () => {
  console.log("new url", url.value)
  const tab = new Tab(uid(), null as unknown as chrome.tabs.Tab)
  tab.created = new Date().getTime()
  tab.chromeTab = ChromeApi.createChromeTabObject(url.value, url.value, null as unknown as string)
  tab.extension = tab.determineUrlExtension(tab.chromeTab)
  TabsetService.saveToCurrentTabset(tab)
}

</script>
