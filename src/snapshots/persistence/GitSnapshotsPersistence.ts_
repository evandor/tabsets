import SnapshotsPersistence from "src/snapshots/persistence/SnapshotsPersistence";
import {Annotation} from "src/snapshots/models/Annotation";
import {Buffer} from "buffer";
// @ts-expect-error TODO
import LightningFS from '@isomorphic-git/lightning-fs';
import http from 'isomorphic-git/http/web'
import * as git from 'isomorphic-git'
import {BlobMetadata, BlobType} from "src/snapshots/models/BlobMetadata";
import {useAuthStore} from "src/stores/authStore";
import {Md5} from "ts-md5";
import {LocalStorage} from "quasar";
import {NotificationType, useNotificationHandler} from "src/core/services/ErrorHandler";

const {handleError} = useNotificationHandler()


if (typeof self !== 'undefined') {
  self.Buffer = Buffer;
}

async function createDir(...segments: string[]) {
  //log("got segments", segments)
  let prefix = ''
  for (const segment of segments) {
    try {
      // @ts-expect-error TODO
      const path = `${dir}/${prefix}${segment}`
      //console.debug("creating fs path", path)
      prefix += segment + "/"
      // @ts-expect-error TODO
      await pfs.mkdir(path)
    } catch (err: any) {
      if (!err.toString().startsWith("Error: EEXIST")) {
        console.log(err)
      }
    }
  }
}

async function push(dir: string, proxy: string) {
  let pushResult = await git.push({
    // @ts-expect-error TODO
    fs,
    http,
    dir,
    remote: 'origin',
    corsProxy: proxy,
    ref: 'main',
    onAuth: () => ({username: LocalStorage.getItem("SYNC_GITHUB_TOKEN") as string || '---'}),
  })
  console.log(pushResult)
}

async function pull(dir: string, proxy: string, author: object) {
  let pullResult = await git.pull({
    // @ts-expect-error TODO
    fs,
    http,
    dir,
    remote: 'origin',
    corsProxy: proxy,
    ref: 'main',
    author,
    onAuth: () => ({username: LocalStorage.getItem("SYNC_GITHUB_TOKEN") as string || '---'}),
  })
  console.log(pullResult)
}

class GitSnapshotsPersistence implements SnapshotsPersistence {
  private db: any // IDBPDatabase = null as unknown as IDBPDatabase
  private readonly _dir = "/tabsets";
  private genericCorsProxy = 'https://cors.isomorphic-git.org'
  //private genericCorsProxy = 'https://git.tabsets.net'
  private tabsetsCorsProxy = 'https://git.tabsets.net'

  private useProxy = this.genericCorsProxy
  private author: { name?: string; email?: string; timestamp?: number; timezoneOffset?: number };

  getServiceName(): string {
    return "GitPersistenceService"
  }

  async init(): Promise<any> {
    console.log(" ...initializing GitPersistenceService")
    const url = "https://github.com/evandor/tabsets-data"//useAuthStore().getAccount()?.userData?.sync?.url
    if (url) {
      this.author = {
        name: useAuthStore().user?.displayName || useAuthStore().user?.email || 'unknown name',
        email: useAuthStore().user?.email || 'unknown@email.address'
      }
      //if (syncType === SyncType.GITHUB) {
        console.log("initializing github database", url)
        try {
          this.db = await this.initDatabase(url, this.genericCorsProxy)
          // useUiStore().dbReady = true
          return Promise.resolve("done")
        } catch (err) {
          return Promise.reject("initialization of git db failed.")
        }
      // } else if (syncType === SyncType.MANAGED_GIT) {
      //   const subscription = LocalStorage.getItem(SUBSCRIPTION_ID_IDENT) as string
      //   console.log("initializing managed git", url)
      //   this.db = await this.initDatabase("https://tabsets.git/" + subscription, this.tabsetsCorsProxy)
      //   // useUiStore().dbReady = true
      //   return Promise.resolve("done")
      // }
    }
    return Promise.resolve("no url given")
  }

  private async initDatabase(url: string, proxy: string, dir: string = this._dir): Promise<any> {
    // @ts-expect-error TODO
    window.fs = new LightningFS('fs')
    // @ts-expect-error TODO
    window.pfs = window.fs.promises
    console.debug("about to initialize git")
    const useDir = dir + "-" + Md5.hashStr(url)
    // @ts-expect-error TODO
    window.dir = useDir
    console.log(useDir);
    this.useProxy = proxy
    try {
      // @ts-expect-error TODO
      await pfs.mkdir(useDir);
    } catch (err: any) {
      if (!err.toString().startsWith("Error: EEXIST")) {
        console.log(err)
      }
    }

    try {
      // try to get status
      let status = await git.status({fs, dir: useDir, filepath: 'README.md'})
      console.log(status)

      // useUiStore().setProgress(0.0, "Cloning...")

      const cloneDef = {
        fs,
        http,
        dir: useDir,
        //corsProxy: 'https://cors.isomorphic-git.org',
        corsProxy: this.useProxy,
        url: url,
        ref: 'main',
        singleBranch: true,
        depth: 10,
        //onProgress: (val:any) => (console.log("onProgress", val)),
        onMessage: (val: any) => {
          // something like "Counting objects:   1% (1/77)"
          const split = val.split(":")
          if (split.length === 2) {
            const msg = split[0]
            const matches = split[1].matchAll(/.*% \(([\d]+)\/([\d]+)\)/gm)
            for (const match of matches) {
              //console.log("found desc", Number(match[1]), Number(match[2]))
              try {
                const quote = Number(match[1]) / Number(match[2])
                // useUiStore().setProgress(quote, msg)
              } catch (err) {
              }
            }

          }
        },
        onAuthSuccess: () => (console.log("auth: success")),
        onAuthFailure: (url: any, auth: any) => {
          console.log("onAuthFailure", url, auth)
          //const settingsPath = chrome.runtime.getURL("/www/index.html#/mainpanel/settings")
          //NavigationService.openSingleTab(settingsPath + "?tab=syncing&token=failed")
        },
        onAuth: () => ({username: LocalStorage.getItem("SYNC_GITHUB_TOKEN") as string || '---'}),
      }
      console.log(`about to clone '${url}' into ${useDir}`, cloneDef)
      const cloneRes = await git.clone(cloneDef);
      console.log("cloning done")

      console.log("pulling now")
      await pull(useDir, this.useProxy, this.author)
      console.log("pulling done")

//      useUiStore().progress = undefined
      return cloneRes
    } catch (err:any) {
      console.log("got error", err, typeof err)
      if (err.toString().indexOf('CheckoutConflictError') >= 0) {
        handleError("Encountered a Sync Conflict", NotificationType.NOTIFY)
      } else {
        handleError("Could not access git backend, check your Credentials", NotificationType.NOTIFY)
      }

      // if (err.toString().indexOf('403') >= 0) {
      //   console.log("redirecting after error")
      //   const settingsPath = chrome.runtime.getURL("/www/index.html#/mainpanel/settings")
      //   await NavigationService.openSingleTab(settingsPath + "?tab=syncing&token=failed")
      // }

      // useUiStore().progress = undefined

      setTimeout(() => {
        // useUiStore().appLoading = "falling back to local tabsets"
        setTimeout(() => {
          // useUiStore().appLoading = undefined
        }, 1000)
      }, 1000)

      return Promise.reject(err)
    }
  }

  addAnnotation(metadataId: string, annotation: Annotation): Promise<Annotation[]> {
    return Promise.resolve([]);
  }

  clear(name: string): void {
  }

  compactDb(): Promise<any> {
    return Promise.resolve(undefined);
  }

  deleteAnnotation(metadataId: string, toDelete: Annotation): Promise<Annotation[]> {
    return Promise.resolve([]);
  }

  deleteBlob(blobId: string): Promise<void> {
    return Promise.resolve(undefined);
  }

  deleteMetadataForSource(metadataId: string): Promise<void> {
    return Promise.resolve(undefined);
  }

  getBlobFor(id: string): Promise<Blob | undefined> {
    return Promise.reject("getBlobFor");
  }

  getMetadata(): Promise<BlobMetadata[]> {
    return Promise.resolve([]);
  }

  getMetadataById(id: string): Promise<BlobMetadata | undefined> {
    return Promise.resolve(undefined);
  }

  getMetadataFor(sourceId: string): Promise<BlobMetadata[]> {
    return Promise.resolve([]);
  }

  saveHTML(id: string, url: string, data: Blob, type: BlobType, remark: string | undefined): Promise<any> {
    return Promise.reject("saveHtml");
  }

  saveMHtml(id: string, url: string, data: Blob, remark: string | undefined): Promise<string> {
    return Promise.resolve("");
  }

  savePdf(id: string, url: string, data: Blob, type: BlobType, remark: string | undefined): Promise<string> {
    return Promise.resolve("");
  }

  savePng(id: string, url: string, data: Blob, type: BlobType, remark: string | undefined): Promise<string> {
    return Promise.resolve("");
  }

  updateAnnotation(tabId: string, index: number, annotation: Annotation): Promise<Annotation[]> {
    return Promise.resolve([]);
  }

}

export default new GitSnapshotsPersistence()
